{
  "common": {
    "back": "Volver",
    "backToHome": "Volver al inicio",
    "backToChallenges": "Volver a los desafíos",
    "backToCourses": "Volver a los cursos",
    "continue": "Continuar",
    "next": "Siguiente",
    "previous": "Anterior",
    "complete": "Completar",
    "start": "Comenzar",
    "explore": "Explorar"
  },
  "nav": {
    "home": "Inicio",
    "challenges": "Desafíos CTF",
    "courses": "Minicursos",
    "about": "Sobre el proyecto",
    "language": "Idioma"
  },
  "home": {
    "title": "Hacking Ético Interactivo",
    "subtitle": "Aprende ciberseguridad a través de desafíos prácticos y minijuegos interactivos",
    "ctfButton": "Desafíos CTF",
    "coursesButton": "Minicursos",
    "whatYouWillLearn": "¿Qué aprenderás?",
    "sqlInjection": {
      "title": "Inyección SQL",
      "description": "Aprende a identificar y explotar vulnerabilidades de inyección SQL en aplicaciones web."
    },
    "xss": {
      "title": "Cross-Site Scripting (XSS)",
      "description": "Descubre cómo funcionan los ataques XSS y cómo proteger tus aplicaciones."
    },
    "ctf": {
      "title": "Desafíos CTF",
      "description": "Pon a prueba tus habilidades con retos prácticos de seguridad informática."
    },
    "aboutSection": {
      "title": "Sobre este proyecto",
      "description": "Este proyecto está diseñado para principiantes en ciberseguridad y estudiantes de hacking ético que quieren practicar habilidades reales desde su navegador, sin necesidad de montar entornos locales. Todos los desafíos y ejercicios se ejecutan directamente en tu navegador.",
      "learnMore": "Saber más"
    }
  },
  "challenges": {
    "title": "Desafíos CTF",
    "description": "Pon a prueba tus habilidades con estos desafíos de seguridad informática. Cada reto te permitirá aplicar conceptos de hacking ético en un entorno controlado.",
    "difficulty": {
      "beginner": "Principiante",
      "intermediate": "Intermedio",
      "advanced": "Avanzado"
    },
    "category": {
      "web": "Web",
      "crypto": "Criptografía",
      "forensics": "Forense",
      "reversing": "Ingeniería Inversa"
    },
    "locked": "Completa los desafíos anteriores para desbloquear",
    "points": "puntos",
    "startChallenge": "Iniciar desafío",
    "challenges": {
      "xssBasic": {
        "title": "XSS Básico",
        "description": "Explora las vulnerabilidades Cross-Site Scripting en una aplicación web simple."
      },
      "inputValidation": {
        "title": "Validación de Entrada",
        "description": "Encuentra y explota fallos en la validación de datos de un formulario."
      },
      "sqlInjection": {
        "title": "SQL Injection",
        "description": "Accede a información confidencial explotando una vulnerabilidad de inyección SQL."
      },
      "authBypass": {
        "title": "Bypass de Autenticación",
        "description": "Encuentra una manera de eludir el sistema de autenticación."
      }
    }
  },
  "courses": {
    "title": "Minicursos Interactivos",
    "description": "Aprende conceptos de seguridad informática con estos minicursos interactivos. Cada módulo incluye ejemplos prácticos y código editable para experimentar.",
    "level": {
      "beginner": "Principiante",
      "intermediate": "Intermedio",
      "advanced": "Avanzado"
    },
    "duration": "minutos",
    "includes": "Incluye ejemplos prácticos",
    "courses": {
      "sqlInjection": {
        "title": "Introducción a SQL Injection",
        "description": "Aprende los fundamentos de las inyecciones SQL y cómo explotarlas de manera ética.",
        "duration": "30"
      },
      "xss": {
        "title": "Cross-Site Scripting (XSS)",
        "description": "Descubre cómo funcionan los ataques XSS y cómo proteger tus aplicaciones web.",
        "duration": "45"
      },
      "formSecurity": {
        "title": "Seguridad en Formularios Web",
        "description": "Aprende a validar entradas de usuario y prevenir ataques comunes en formularios.",
        "duration": "40"
      },
      "secureAuth": {
        "title": "Autenticación Segura",
        "description": "Implementa sistemas de autenticación robustos y evita vulnerabilidades comunes.",
        "duration": "60"
      }
    }
  },
  "about": {
    "title": "Sobre el Proyecto",
    "subtitle": "Una plataforma educativa para aprender ciberseguridad de forma práctica",
    "description": {
      "part1": "Este proyecto nace con el objetivo de proporcionar un entorno seguro y accesible para que principiantes en ciberseguridad y estudiantes de hacking ético puedan practicar habilidades reales directamente desde su navegador, sin necesidad de configurar entornos complejos.",
      "part2": "A través de desafíos tipo CTF (Capture The Flag) y minicursos interactivos, los usuarios pueden aprender conceptos fundamentales de seguridad informática, como inyecciones SQL, Cross-Site Scripting (XSS), validación de entradas y mucho más, todo ello en un entorno controlado y ético.",
      "part3": "Todas las vulnerabilidades y técnicas presentadas en esta plataforma son con fines educativos, y promovemos el uso responsable y ético de estos conocimientos."
    },
    "features": {
      "title": "Características principales",
      "ctf": {
        "title": "Desafíos CTF",
        "items": [
          "Retos prácticos de seguridad",
          "Sistema de pistas y niveles",
          "Validación de flags",
          "Seguimiento de progreso"
        ]
      },
      "courses": {
        "title": "Minicursos",
        "items": ["Explicaciones paso a paso", "Código editable", "Ejemplos prácticos", "Recursos adicionales"]
      }
    },
    "technologies": {
      "title": "Tecnologías utilizadas",
      "frontend": {
        "title": "Frontend",
        "items": ["Next.js (React)", "Tailwind CSS", "Shadcn UI", "Monaco Editor (para código)"]
      },
      "storage": {
        "title": "Almacenamiento",
        "items": ["LocalStorage (progreso)", "Archivos estáticos"]
      }
    },
    "contribute": {
      "title": "Contribuir al proyecto",
      "description": "Este proyecto es de código abierto y las contribuciones son bienvenidas. Si deseas colaborar, puedes hacerlo de las siguientes maneras:",
      "items": [
        "Añadir nuevos desafíos CTF",
        "Crear minicursos sobre temas de seguridad",
        "Mejorar la documentación",
        "Reportar errores o sugerir mejoras"
      ],
      "github": "Ver en GitHub"
    }
  },
  "challenge": {
    "xssBasic": {
      "title": "Desafío: XSS Básico",
      "description": "Has encontrado un sitio web que muestra directamente lo que ingresas en un campo de texto. Tu objetivo es encontrar una vulnerabilidad XSS (Cross-Site Scripting) y explotarla para obtener la flag.",
      "objective": {
        "title": "Objetivo",
        "description": "Ejecuta un alert() con el mensaje 'xss' para obtener la flag."
      },
      "tabs": {
        "challenge": "Desafío",
        "hints": "Pistas",
        "submit": "Enviar Flag"
      },
      "vulnerableWebsite": {
        "title": "Sitio web vulnerable",
        "description": "Este sitio muestra lo que escribes. ¿Puedes encontrar una vulnerabilidad?",
        "inputLabel": "Ingresa tu mensaje:",
        "submitButton": "Enviar",
        "resultLabel": "Resultado:"
      },
      "hints": {
        "noHints": "No has revelado ninguna pista todavía.",
        "revealHint": "Revelar pista",
        "hintsList": [
          "El sitio muestra directamente lo que ingresas sin filtrar. ¿Qué pasaría si ingresas código HTML?",
          "Prueba a insertar una etiqueta <script> con código JavaScript.",
          "Para obtener la flag, necesitas hacer que se ejecute un alert() con el mensaje 'xss'."
        ]
      },
      "submitFlag": {
        "title": "Enviar Flag",
        "description": "Una vez que hayas encontrado la flag, ingrésala aquí para completar el desafío.",
        "inputLabel": "Flag (formato CTF{texto}):",
        "placeholder": "CTF{...}",
        "verifyButton": "Verificar Flag",
        "completedButton": "Ya completado",
        "success": "¡Correcto! Has completado el desafío.",
        "error": "Flag incorrecta. Inténtalo de nuevo.",
        "foundFlag": "¡Has encontrado la flag!"
      }
    }
  },
  "course": {
    "sqlInjection": {
      "title": "Introducción a SQL Injection",
      "tabs": {
        "content": "Contenido",
        "resources": "Recursos"
      },
      "step": "Paso",
      "of": "de",
      "steps": {
        "intro": {
          "title": "Introducción a SQL Injection",
          "content": {
            "part1": "Las inyecciones SQL (SQL Injection) son uno de los ataques más comunes y peligrosos contra aplicaciones web. Ocurren cuando un atacante puede insertar o \"inyectar\" código SQL malicioso en una consulta que la aplicación envía a su base de datos.",
            "dangerTitle": "¿Por qué es peligroso?",
            "dangerContent": "Un ataque de SQL Injection exitoso puede permitir a los atacantes:",
            "dangerItems": [
              "Acceder a datos sensibles",
              "Modificar datos en la base de datos",
              "Eliminar información importante",
              "En algunos casos, ejecutar comandos en el servidor"
            ],
            "part2": "En este minicurso, aprenderás a identificar vulnerabilidades de SQL Injection, cómo explotarlas de manera ética y, lo más importante, cómo proteger tus aplicaciones contra ellas."
          }
        },
        "identifying": {
          "title": "Identificando código vulnerable",
          "content": {
            "part1": "El primer paso para entender las inyecciones SQL es identificar código vulnerable. Observa el siguiente ejemplo de una función de login típica:",
            "part2": "Este código es vulnerable porque concatena directamente los valores de entrada del usuario en la consulta SQL. Si un atacante ingresa valores especiales, puede manipular la estructura de la consulta.",
            "exampleTitle": "Ejemplo de ataque",
            "exampleContent": "Si un atacante ingresa admin' -- como nombre de usuario, la consulta resultante sería:",
            "exampleQuery": "SELECT * FROM users WHERE username = 'admin' --' AND password = 'cualquier_cosa'",
            "exampleExplanation": "El -- comenta el resto de la consulta, haciendo que la verificación de contraseña se ignore."
          }
        },
        "practice": {
          "title": "Práctica: Explotar una vulnerabilidad",
          "content": {
            "part1": "Ahora es tu turno de practicar. Modifica el código en el editor para explotar la vulnerabilidad de SQL Injection. Tu objetivo es modificar la función testLogin() para que devuelva true sin conocer la contraseña correcta.",
            "hintTitle": "Pista",
            "hintContent": "Intenta usar comentarios SQL (-- o #) o la cláusula OR para manipular la lógica de la consulta."
          }
        },
        "prevention": {
          "title": "Prevención de SQL Injection",
          "content": {
            "part1": "Ahora que entiendes cómo funcionan las inyecciones SQL, es crucial aprender a prevenirlas. Aquí hay algunas técnicas efectivas:",
            "technique1": {
              "title": "1. Uso de Consultas Parametrizadas",
              "description": "Las consultas parametrizadas (o preparadas) separan el código SQL de los datos, evitando que los datos del usuario se interpreten como código SQL."
            },
            "technique2": {
              "title": "2. ORM (Object-Relational Mapping)",
              "description": "Utilizar un ORM como Sequelize, Prisma o TypeORM puede ayudar a prevenir inyecciones SQL al manejar automáticamente la sanitización de datos."
            },
            "technique3": {
              "title": "3. Validación de Entrada",
              "description": "Siempre valida y sanitiza los datos de entrada del usuario antes de usarlos en consultas SQL."
            },
            "technique4": {
              "title": "4. Principio de Menor Privilegio",
              "description": "Utiliza cuentas de base de datos con los mínimos privilegios necesarios para la aplicación."
            },
            "bestPracticeTitle": "Buena práctica",
            "bestPracticeContent": "Nunca confíes en los datos de entrada del usuario. Siempre valida, sanitiza y utiliza consultas parametrizadas para proteger tu aplicación contra inyecciones SQL."
          }
        },
        "finalExercise": {
          "title": "Ejercicio Final",
          "content": {
            "part1": "Para finalizar este minicurso, vamos a corregir el código vulnerable que vimos anteriormente. Tu tarea es modificar la función loginUser para que utilice consultas parametrizadas y sea segura contra inyecciones SQL.",
            "solutionTitle": "Solución de ejemplo"
          }
        }
      },
      "resources": {
        "title": "Recursos adicionales",
        "description": "Enlaces y materiales complementarios para profundizar en el tema.",
        "documentation": {
          "title": "Documentación y guías",
          "items": [
            {
              "title": "OWASP: SQL Injection",
              "url": "https://owasp.org/www-community/attacks/SQL_Injection"
            },
            {
              "title": "PortSwigger: SQL Injection",
              "url": "https://portswigger.net/web-security/sql-injection"
            }
          ]
        },
        "tools": {
          "title": "Herramientas de práctica",
          "items": [
            {
              "title": "SQLMap - Herramienta de detección y explotación de SQL Injection",
              "url": "https://github.com/sqlmapproject/sqlmap"
            },
            {
              "title": "Hacksplaining: SQL Injection Interactive Tutorial",
              "url": "https://www.hacksplaining.com/exercises/sql-injection"
            }
          ]
        }
      }
    }
  }
}
